---
description: 
globs: 
alwaysApply: true
---
# Rewrite Stars - Cursor Project Rules

## Project Overview
- **Name**: rewrite-stars
- **Purpose**: GitHub starred repositories dashboard with beautiful UI and organization features
- **Languages**: English, Korean (using next-intl 4.0)
- **Description**: A web service that transforms GitHub starred repositories into a well-organized, visually appealing dashboard

## Tech Stack
- **Database**: Supabase
- **Framework**: Next.js App Router
- **Language**: TypeScript 5
- **Package Manager**: Bun
- **Deployment**: Vercel
- **Linting**: Biome
- **UI Libraries**: 
  - magic-ui
  - Tailwind CSS
  - shadcn/ui
  - Radix UI
  - class-variance-authority
  - clsx
  - sonner (for notifications)
- **APIs**: @octokit/rest, ky
- **Internationalization**: next-intl 4.0

## User Flow
1. **Authentication**: GitHub SSO login
2. **Dashboard Access**: Redirect to personal dashboard after login
3. **Data Sync**: First-time users fetch starred repos via GitHub Octokit API
4. **Dashboard Display**: Show repositories as organized cards
5. **Tag Management**: Users can add/manage custom tags for repositories
6. **Filtering**: Filter repositories by selected tags
7. **Sharing**: Dashboard links are publicly shareable

## Repository Card Information
Each card displays:
- Repository name
- External link to repository
- Public/Private status
- Repository description
- Last updated date
- Star count
- Owner avatar
- Repository topics
- **Custom user tags** (user-defined)

*All information except custom tags comes from GitHub Octokit API*

## Database Schema (Supabase)
```sql
-- Users table
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  github_id BIGINT UNIQUE NOT NULL,
  username VARCHAR(255) NOT NULL,
  avatar_url TEXT,
  access_token TEXT, -- encrypted
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Repositories table
CREATE TABLE repositories (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  github_repo_id BIGINT UNIQUE NOT NULL,
  owner VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  full_name VARCHAR(255) NOT NULL,
  description TEXT,
  html_url TEXT NOT NULL,
  private BOOLEAN DEFAULT false,
  stargazers_count INTEGER DEFAULT 0,
  updated_at_github TIMESTAMP WITH TIME ZONE,
  topics TEXT[], -- array of topics
  owner_avatar_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User starred repositories
CREATE TABLE user_starred_repos (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  repository_id UUID REFERENCES repositories(id) ON DELETE CASCADE,
  starred_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, repository_id)
);

-- Tags table
CREATE TABLE tags (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL,
  color VARCHAR(7) DEFAULT '#3b82f6', -- hex color
  created_by UUID REFERENCES users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(name, created_by)
);

-- Repository tags (many-to-many)
CREATE TABLE repository_tags (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  repository_id UUID REFERENCES repositories(id) ON DELETE CASCADE,
  tag_id UUID REFERENCES tags(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, repository_id, tag_id)
);
```

## Project Structure (FSD-inspired)
```
src/
├── app/                          # Next.js App Router
│   ├── [locale]/                 # Internationalization routing
│   │   ├── page.tsx             # Home page
│   │   ├── login/               # Login page
│   │   ├── dashboard/           # Dashboard pages
│   │   │   ├── page.tsx         # User dashboard
│   │   │   └── [username]/      # Public dashboard
│   │   └── layout.tsx
│   ├── api/                     # API routes
│   │   ├── auth/                # Authentication endpoints
│   │   ├── github/              # GitHub API proxies
│   │   └── repositories/        # Repository management
│   ├── globals.css
│   └── layout.tsx
├── entities/                     # Database entity types
│   ├── user.ts
│   ├── repository.ts
│   └── tag.ts
├── features/                     # Feature-specific code
│   ├── auth/                    # Authentication features
│   ├── dashboard/               # Dashboard features
│   ├── repository-card/         # Repository card component
│   └── tag-management/          # Tag management features
├── shared/
│   ├── constants/               # Project constants
│   │   ├── api.ts
│   │   ├── routes.ts
│   │   └── colors.ts
│   ├── libs/                    # Library wrappers
│   │   ├── supabase.ts
│   │   ├── github.ts
│   │   └── auth.ts
│   ├── models/                  # Database models
│   ├── utils/                   # Common utilities
│   │   ├── format.ts
│   │   ├── validation.ts
│   │   └── date.ts
│   ├── contexts/                # React contexts
│   │   ├── auth-context.tsx
│   │   └── theme-context.tsx
│   ├── hooks/                   # Custom hooks
│   │   ├── use-auth.ts
│   │   ├── use-repositories.ts
│   │   └── use-tags.ts
│   └── ui/                      # UI components
│       ├── magic-ui/            # Magic UI components
│       ├── shadcn/              # shadcn/ui components
│       └── components/          # Custom components
├── middleware.ts                # Next.js middleware for i18n
└── instrumentation.ts           # Instrumentation setup
```

## Coding Standards
- **Type Definitions**: Prefer `type` over `interface`
- **Error Handling**: Use Error Boundaries for component-level error handling
- **Naming**: Use descriptive, consistent naming conventions
- **File Structure**: Group related files in feature folders
- **Imports**: Use absolute imports with path mapping

## Security Implementation
- **Token Management**: 
  - Store GitHub access tokens as HTTP-only cookies
  - Encrypt sensitive data in database
  - Use GitHub SSO for authentication
- **API Security**: 
  - Validate all API requests
  - Rate limiting for GitHub API calls
  - CORS configuration
- **Data Privacy**: 
  - Only store necessary user data
  - Respect GitHub API rate limits

## Page Structure
1. **Home Page** (`/`): 
   - Project introduction
   - Features overview
   - Login CTA
2. **Login Page** (`/login`):
   - GitHub SSO integration
   - Privacy information
3. **Dashboard** (`/dashboard`):
   - Personal repository dashboard
   - Tag management interface
   - Search and filter functionality
4. **Public Dashboard** (`/dashboard/[username]`):
   - Read-only view of user's organized repositories
   - Share-friendly URLs

## API Endpoints
```typescript
// Authentication
POST /api/auth/github          # GitHub OAuth callback
POST /api/auth/logout          # Logout user
GET  /api/auth/me             # Get current user

// Repositories
GET  /api/repositories        # Get user's starred repositories
POST /api/repositories/sync   # Sync with GitHub
GET  /api/repositories/public/[username] # Get public dashboard

// Tags
GET  /api/tags                # Get user's tags
POST /api/tags                # Create new tag
PUT  /api/tags/[id]          # Update tag
DELETE /api/tags/[id]        # Delete tag
POST /api/tags/assign        # Assign tag to repository
DELETE /api/tags/unassign    # Remove tag from repository
```

## Environment Variables
```bash
# GitHub OAuth
GITHUB_CLIENT_ID=
GITHUB_CLIENT_SECRET=
GITHUB_CALLBACK_URL=

# Supabase
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=

# NextAuth
NEXTAUTH_SECRET=
NEXTAUTH_URL=

# Encryption
ENCRYPTION_KEY=
```

## Performance Considerations
- **GitHub API Rate Limiting**: Implement smart caching and batch requests
- **Image Optimization**: Use Next.js Image component for avatars
- **Lazy Loading**: Implement virtual scrolling for large repository lists
- **Caching Strategy**: Cache repository data with appropriate TTL
- **Database Indexing**: Index frequently queried fields

## Error Handling Strategy
- **Network Errors**: Graceful degradation with retry mechanisms
- **API Errors**: User-friendly error messages with actionable steps
- **Authentication Errors**: Clear login flow redirection
- **Component Errors**: Error boundaries with fallback UI
- **Loading States**: Skeleton components during data fetching

## Internationalization
- **Supported Languages**: English (en), Korean (ko)
- **Translation Keys**: Organized by feature/page
- **Dynamic Content**: GitHub API responses remain in original language
- **URL Structure**: `/en/...` and `/ko/...` for language routing

## Testing Strategy
- **Unit Tests**: Utils, hooks, and pure functions
- **Integration Tests**: API routes and database operations
- **Component Tests**: Key UI components with user interactions
- **E2E Tests**: Critical user flows (login, dashboard, tagging)

## Deployment Configuration
- **Platform**: Vercel
- **Environment**: Production, Preview, Development
- **Database**: Supabase (managed PostgreSQL)
- **CDN**: Vercel Edge Network
- **Monitoring**: Built-in Vercel analytics

## Development Workflow
1. **Setup**: `bun install` for dependencies
2. **Development**: `bun dev` for local development
3. **Linting**: `bun lint` using Biome
4. **Type Checking**: `bun type-check`
5. **Testing**: `bun test`
6. **Build**: `bun build` for production build

## Key Features Implementation
- **Repository Sync**: Background job to sync GitHub stars
- **Tag System**: Autocomplete with existing tags, create new ones
- **Search & Filter**: Full-text search with tag-based filtering
- **Responsive Design**: Mobile-first approach
- **Dark/Light Mode**: System preference with manual toggle
- **Share Dashboard**: Generate public URLs for dashboard sharing